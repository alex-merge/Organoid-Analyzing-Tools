# -*- coding: utf-8 -*-
"""
Vector based analyzing components of OAT.

@author: alex-merge
@version: 0.7
"""

import numpy as np
import pandas as pd
import time

from modules.utils.filemanager import filemanager
from modules.utils.compute import compute
from modules.import_data import import_data

class vectors():
    
    def load_from_trackmate(dirpath, rescaling = [1, 1, 1], filtering = False):
        """
        Load the csv files that have been generated by Trackmate.
        The expected files are the tracks>spots csv and tracks>edges csv.
        Returns a pandas dataframe containing coordinates, 
        displacement vectors as well as clustering information if filtering
        have been set to True.

        Parameters
        ----------
        dirpath : str
            Path to the folder containing csv files.
        rescaling : list, optional
            Rescaling factors by axis : [x, y, z]. The default is [1, 1, 1].
        filtering : bool, optional
            If True, cluster the spots to remove those that are not part of the
            organoid. 
            The default is False.

        Returns
        -------
        df : pandas.DataFrame
            Dataframe containing merged informations of both csv files.
            Can be used for the next part of the pipeline.

        """
        ## Loading vectors.
        step_time = time.time()
        print("Opening files ...", end = " ")
        df = import_data.read_tracks(dirpath, rescaling)
        print("Done !", "("+str(round(time.time()-step_time, 2))+"s)")
        
        ## Computing vectors.
        step_time = time.time()
        print("Computing displacement vectors ...", end = " ")
        df = compute.vectors(df, filtering = filtering)
        print("Done !", "("+str(round(time.time()-step_time, 2))+"s)")
        
        return df
    
    
    def load_from_quickPIV(dirpath):
        """
        Loading method for quickPIV results. The files are in a .vtk format.

        Parameters
        ----------
        dirpath : str
            Path to the folder containing .vtk files.

        Returns
        -------
        df : pandas.DataFrame
            Dataframe containing time points, coordinates and displacement 
            vectors.

        """
        
        filepaths = filemanager.search_file(dirpath, "vtk")
        file_to_idx = {filepaths[k]: k for k in range(len(filepaths))}
        
        df = pd.DataFrame(dtype = "object")
        
        for filepath in filepaths:
            """
            Code provided by @Marc-3d.
            """
            stream = open(filepath, 'r')
    
            ## reading the size of the vector field
            dims, length = [ 0, 0, 0 ], 0
            
            ## Reading the first 8 lines of the vtk file (metadata) 
            for lidx in range(9):
                line = stream.readline()
                
                if "DIMENSIONS" in line:
                    dims = [ int(x) for x in line.split(" ")[1:4] ]
                    
                elif "POINT_DATA" in line:
                    length = int( line.split(" ")[1] )
                    
            ## Creating 3xN arrays (3 dimensions x N vectors) to store the 
            ## vectors of the vector fields
            displacements = np.zeros( (3, length) )
            positions     = np.zeros( (3, length) )
            
            ## Reading the rest of the file. Each line contains one vector.
            row, col, zet = 0, 1, 1;
            for lidx in range(0,length):
    
                line  = stream.readline()
                displ = [ float(x) for x in line.split(" ") ]
                displacements[:,lidx] = displ
    
                ## Transforming from linear index to a 3D coordinate, 
                ## ( row, col, zet ) or ( y, x, z )
                row = row + 1
                if ( row > dims[0] ):
                    row = 1
                    col += 1
                if ( col > dims[1] ):
                    col = 1
                    row = 1
                    zet += 1
                positions[:,lidx] = [ row, col, zet ]

            stream.close()
        
            ## Removing null vectors while creating a dataframe merging both
            ## position and displacements.
            disp = pd.Series(dtype = "object", name = "DISP_VECT")
            pos = pd.Series(dtype = "object", name = "COORD")
            
            for idx in range(displacements.shape[1]):
                if not np.array_equal(displacements[:, idx], np.zeros(3)) :
                    disp.loc[idx] = displacements[:, idx]
                    pos.loc[idx] = positions[:, idx]
            
            
            tp = pd.Series([file_to_idx[filepath]]*disp.shape[0], name = "TP",
                           index = disp.index)
            
            subdf = pd.concat([pos, disp, tp], axis = 1)
            df = pd.concat([df, subdf], axis = 0, ignore_index = True)
            
        return df
    
    def load_from_csv(dirpath = None, filepath = None, coord_prefix = "COORD_",
                      vect_prefix = "VECT_"):
        """
        Legacy method to load any kind of .csv file. But it must contains 
        some columns : 
            - TP : time point for the point if 1 file given, optionnal for a 
                   folder import.
            - COORD : coordinates of the point
            If displacement vectors are already computed:
            - DISP_VECT : displacement vectors stored the same line as its
                          origin point.
            Else :
            - TRACK_ID : track a point is part of.
            - TARGET : the next point in the track starting from the point.

        Parameters
        ----------
        dirpath : str
            Path to the directory containing multiple files. 
            The default is None.
        filepath : str
            Fullpath of the file to load. The default is None.
        coord_prefix : str
            Prefix of the coordinates columns. The default is "COORD_".
            For example, the prefix of [C_X, C_Y, C_Z] is "C_".
        vect_prefix : str
            Same as coord_prefix but for displacement vectors if present in the 
            file. 

        Returns
        -------
        final_df : pandas.DataFrame
            Dataframe containing time points, coordinates and displacement 
            vectors.

        """
        if dirpath is not None:
            filepaths = filemanager.search_file(dirpath, "csv")
        elif filepath is not None:
            filepaths = [filepath]
        elif dirpath is not None and filepath is not None:
            raise ValueError("Too many inputs : choose between directory and specific file")
        else :
            raise ValueError("No inputs")
            
        final_df = pd.DataFrame(dtype = "object", 
                                columns = ["TP", "TRACK_ID", "COORD"])
            
        for file_id in range(len(filepaths)) :
            stream = pd.read_csv(file_id)
            
            if not "TP" in stream.columns :
                temp_df = stream["TRACK_ID"].to_frame()
                temp_df = pd.concat([temp_df, 
                                     pd.Series([file_id]*len(temp_df.index))],
                                    axis = 1)
            else :
                temp_df = stream[["TP", "TRACK_ID"]]
            
            coord = pd.Series(dtype = "object")
            
            for idx in stream.index:
                coord.loc[idx] = np.array(
                    stream.loc[idx, [coord_prefix+k for k in list("XYZ")]].tolist()
                    )
                
            temp_df = pd.concat([temp_df, coord], axis = 1)
            
            final_df = pd.concat([final_df, temp_df], axis = 0)
            
        return final_df
            
    
    def get_drift(df, data = None):
        """
        Add drift informations to the main dataframe.

        Parameters
        ----------
        df : pandas.DataFrame
            Dataframe with those columns :
                - COORD
                - TP
                
        Return
        ------
        pandas.DataFrame
            Dataframe with drift informations.

        """
        step_time = time.time()
        print("Computing drift ...", end = " ")
        
        if filemanager.check_requirements(df, ["COORD", "TP"]):
            drift = compute.drift(df)    
        
        if data is not None :
            drift = pd.concat([data, drift], axis = 1)
        
        print("Done !", "("+str(round(time.time()-step_time, 2))+"s)")
        return drift
    
        
    def get_volume(df, data = None):
        """
        Compute the volume of the organoÃ¯d using convex hull algorithm.
        The results are added to data if given or returned in a new dataframe.
        
        There must be at least 4 spots per time points.

        Parameters
        ----------
        df : pandas.DataFrame
            Dataframe with those columns :
                - COORD
                - TP

        Returns
        -------
        pandas.DataFrame
            Dataframe with volume informations.

        """
        step_time = time.time()
        print("Computing volume and radius ...", end = " ")
        
        if filemanager.check_requirements(df, ["COORD", "TP"]) and \
            df.shape[0]/len(df["TP"].unique()) >= 4:  
                
            volume = compute.volume(df)
            
        else :
            raise IndexError("Unable to compute : not enough points per time points.")
            
        if data is not None :
            volume = pd.concat([data, volume], axis = 1)
            
        print("Done !", "("+str(round(time.time()-step_time, 2))+"s)")
        return volume
    
    
    def get_translated_coords(df, data):
        """
        Compute the translated coords to [0, 0, 0].

        Parameters
        ----------
        df : pandas.DataFrame
            Dataframe containing those columns :
                - COORD
                - TP
        data : pandas.DataFrame, optional
            Dataframe containing informations per time points . 
            The default is None.
            If provided, it must contains the following column :
                - RAW_CENT

        Returns
        -------
        df : pandas.DataFrame
            Same input dataframe with the translated coordinates added in
            "CENTRD_COORD".

        """
        
        step_time = time.time()
        print("Translating coordinates to the center ...", end = " ")
        
        if filemanager.check_requirements(df, ["COORD", "TP"]) and \
            (data is not None and \
             filemanager.check_requirements(data, ["CENTROID"])):
                
            df, data = compute.translation(df, data)
            
        print("Done !", "("+str(round(time.time()-step_time, 2))+"s)")
        return df, data
    
    
    def get_rotation_axis(df, data = None):
        """
        Compute the rotation axis for each time points and add the results to 
        data, if provided.

        Parameters
        ----------
        df : pandas.DataFrame
            Dataframe which contain the following columns :
                - TP
                - DISP_VECT
        data : pandas.DataFrame, optional
            Dataframe which contains the information for each time points. 
            The default is None.

        Returns
        -------
        data : pandas.DataFrame
            Dataframe with time points informations with results.

        """
        step_time = time.time()
        print("Computing the axis of rotations ...", end = " ")
        if filemanager.check_requirements(df, ["TP", "DISP_VECT"]):
            
            data = compute.rotation_axis(df, data)

        print("Done !", "("+str(round(time.time()-step_time, 2))+"s)")
        return data
    
    def get_aligned_rotation(df, data):
        """
        Compute the aligned coordinates, displacement vectors and rotation axis.
        Add the informations to both data for time points scale info and df for
        spot scale info.

        Parameters
        ----------
        df : pandas.DataFrame
            Dataframe which contain the following columns :
                - TP
                - DISP_VECT
                - CENTRD_COORD
        data : pandas.DataFrame
            Dataframe which contains the following column :
                - RA_VECT
            
        Returns
        -------
        df & data : pandas.DataFrame
            Input dataframe with added informations.         

        """
        step_time = time.time()
        print("Aligning rotation axis and Z axis ...", end = " ")
        
        if (filemanager.check_requirements(df, ["CENTRD_COORD", "DISP_VECT", "TP"])
            and filemanager.check_requirements(data, ["RA_VECT"])):
            
            df, data = compute.alignment(df, data)
        
        print("Done !", "("+str(round(time.time()-step_time, 2))+"s)")
        return df, data
    
    def get_angular_velocity(df, data):
        """
        Computing the angular velocity.

        Parameters
        ----------
        df : pandas.DataFrame
            Dataframe which contain the following columns :
                - TP
                - DISP_VECT
                - COORD
        data : pandas.DataFrame
            Dataframe which contains the following column :
                - V1
                - V2

        Returns
        -------
        df & data with the angular velocity data added.

        """
        step_time = time.time()
        print("Computing angular velocity ...", end = " ")
        
        if filemanager.check_requirements(df, ["COORD", "DISP_VECT", "TP"]) and \
            filemanager.check_requirements(data, ["V1", "V2"]):
                
            df, data = compute.angular_velocity(df, data)
        
        print("Done !", "("+str(round(time.time()-step_time, 2))+"s)")
        return df, data
        
    def full_analysis(df):
        """
        Run a full analysis on the vectors of the dataset.

        Parameters
        ----------
        df : pandas.DataFrame
            Dataframe loaded using the provided methods of OAT.

        Returns
        -------
        df : pandas.DataFrame
            Dataframe with informations per spots.
        data : pandas.DataFrame
            Dataframe with informations per time points.

        """
        
        start_time = time.time()
        
        ## Computing drift.
        data = vectors.get_drift(df)
        
        ## Computing volume and radius.
        data = vectors.get_volume(df, data)
        
        ## Translating coords to the center ([0, 0, 0])
        df, data = vectors.get_translated_coords(df, data)
        
        ## Computing the axis of rotation vectors.
        data = vectors.get_rotation_axis(df, data)
        
        ## Aligning axis of rotation with the Z axis.
        df, data = vectors.get_aligned_rotation(df, data)

        ## Computing angular velocity.
        df, data = vectors.get_angular_velocity(df, data)
        
        print("")
        print("Analysis done ! Total time :", round(time.time()-start_time, 2),
              "sec")
        ## Returning datasets.
        return df, data
    
    
        